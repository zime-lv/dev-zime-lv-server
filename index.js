!function(e){var n={};function s(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=e,s.c=n,s.d=function(e,n,r){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)s.d(r,a,function(n){return e[n]}.bind(null,a));return r},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="",s(s.s=4)}([function(e,n,s){s(9).config();const r=s(10),a=void 0!==process.env.SITE_MODE?process.env.SITE_MODE:"DEVELOPMENT",t={uri:{ENDPOINT:process.env.DEV_URI},db:{host:process.env.DEV_DB_HOST,user:process.env.DEV_DB_USER,password:r.decrypt(process.env.DEV_DB_PASS),database:process.env.DEV_DB}},o={uri:{ENDPOINT:process.env.STAGING_URI},db:{host:process.env.STAGING_DB_HOST,user:process.env.STAGING_DB_USER,password:r.decrypt(process.env.STAGING_DB_PASS),database:process.env.STAGING_DB}},i={uri:{ENDPOINT:process.env.PROD_URI},db:{host:process.env.PROD_DB_HOST,user:process.env.PROD_DB_USER,password:r.decrypt(process.env.PROD_DB_PASS),database:process.env.PROD_DB}};let u;switch(a){case"DEVELOPMENT":u=t;break;case"STAGING":u=o;break;case"LIVE":u=i;break;default:u=t}e.exports={...u}},function(e,n){e.exports=require("uuid")},function(e,n){e.exports=require("crypto")},function(e,n){e.exports={dbMergeFlags:{ALLOW_UNCHANGED_ROWS:1}}},function(e,n,s){(function(e){const n="Suranadira"!==s(5).hostname(),r=s(6),a=r(),t=s(7).Server(a),o=s(8)(t,{serveClient:!1,reconnection:!0,reconnectionDelay:1e3,reconnectionDelayMax:5e3,reconnectionAttempts:99999}),{v4:i}=s(1),u=s(0).uri.ENDPOINT;o.setMaxListeners(0);const l=s(11);global.appRoot=l.resolve(e);const c=s(12);t.listen(n?443:9e3),a.use(r.static(e+"/_client")),a.use(r.json()),a.use(r.urlencoded({extended:!0}));const p=e=>{!1!==e&&(console.log("SENDING",e,"TO",e.session),o.in(e.session).emit("onDataReceived",e))};a.post("/ip",(function(e,n){const s=e.headers["x-forwarded-for"]||e.connection.remoteAddress||e.socket.remoteAddress||(e.connection.socket?e.connection.socket.remoteAddress:null);n.send({ip:s})})),a.post("/auth",(function(e,n){const s=i(),r=void 0!==e.body.merchant?e.body.merchant:"",a=void 0!==e.body.cart?e.body.cart:"",t={cartid:s,content:a,merchant:r,reviser:"SYS",workplace:"SYSTEM"};c.userRequest({data:{req:"save cart",session:null,data:t},onResult:()=>{}}),n.redirect(`${u}/auth?cart=${s}`)})),a.get("/summary",(function(e,n){const s=l.resolve("./_client/index.html");console.log("resolvedPath:",s),n.sendFile(s,(function(e){e&&n.status(500).send(e)}))})),a.get("*",(function(e,n){const s=l.resolve("./_client/index.html");console.log("resolvedPath:",s),n.sendFile(s,(function(e){e&&n.status(500).send(e)}))}));const d=[];o.on("connection",e=>{d.push(e),e.on("start session",(function(n){e.join(n.session),n.status="success",n.socketId=e.id,n.reqData=n.data,o.in(n.session).emit("onDataReceived",n),console.log("Socket started the session",n.session),console.log("ROOMS:",d[0].adapter.rooms)})),e.on("end session",(function(n){n.status="success",n.reqData=n.data,o.in(n.session).emit("onDataReceived",n),e.leave(n.session),console.log("Socket ended the session",n.session)})),e.on("disconnect",()=>{console.log("Got disconnect!");const n=d.indexOf(e);d.splice(n,1)}),e.on("onDataReceived",e=>{c.userRequest({data:e,onResult:p})})})}).call(this,"/")},function(e,n){e.exports=require("os")},function(e,n){e.exports=require("express")},function(e,n){e.exports=require("http")},function(e,n){e.exports=require("socket.io")},function(e,n){e.exports=require("dotenv")},function(e,n,s){const r=s(2),a="2e3fa223e381c865cc25a533676b9e12e5eb5588331c32fe229d5088063e1208",t="456fe4efc189c7182278721778199fe3";e.exports={encrypt:e=>{let n=r.createCipheriv("aes-256-cbc",Buffer.from(a,"hex"),Buffer.from(t,"hex")),s=n.update(e);return s=Buffer.concat([s,n.final()]),{encryptedData:s.toString("hex")}},decrypt:e=>{let n=Buffer.from(e,"hex"),s=r.createDecipheriv("aes-256-cbc",Buffer.from(a,"hex"),Buffer.from(t,"hex")),o=s.update(n);return o=Buffer.concat([o,s.final()]),o.toString()}}},function(e,n){e.exports=require("path")},function(e,n,s){const r=s(13),a=s(14),{v4:t}=s(1),o=s(15),i=s(22),u=s(23);let l=null;const c=e=>{let n;e.type="userRequest",n=u.process(e),console.log("processEvent response: ",n),!1!==n&&l(n)},p=e=>{console.log("onError: ",e),e.type="userRequest",res=i.process(e),!1!==res&&(console.log("emit onDataReceived: ",res),l(res))};e.exports={userRequest:e=>{data=e.data,l=e.onResult;const n=data.data;switch(data.req){case"get account data":o.getAccount({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:n.uid,timeout:n.timeout,checkTimeout:n.checkTimeout});break;case"dispatch daily allowance":o.transferV2U({req:"transfer V2U",session:data.session,reqData:n,onStatusChange:c,onError:p,recipient_id:n.uid});break;case"get transactions":o.getTransactions({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:n.uid,language:n.language,page:n.page-1,limit:n.limit});break;case"get shares":o.getShares({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:n.uid,language:n.language,page:n.page-1,limit:n.limit});break;case"sign in user":o.getUriSettings({req:"get uri settings",session:data.session,reqData:n,onStatusChange:c,onError:p,uri:n.uri}),o.initUser({req:"init user",session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email}),o.signInUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,pw:n.password,ip:n.ip});break;case"update last seen user":o.lastSeenUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email});break;case"register user":o.mergeUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,firstname:n.firstName,lastname:n.lastName,email:n.email,pw:n.password,language:n.language,validateEmail:n.validateEmail,reviser:n.reviser,workplace:n.workplace});break;case"change password":o.mergeUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,pw:n.password,reviser:n.reviser,workplace:n.workplace});break;case"get user sequence":o.getSequence({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,birthdate:n.birthDate,timezone:n.timezone,uid:null,reviser:n.reviser,workplace:n.workplace});break;case"register account":o.mergeUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,birthdate:n.birthDate,timezone:n.timezone,scode:n.scode,tcode:n.tcode,sequence:n.sequence,uid:null,reviser:n.reviser,workplace:n.workplace});break;case"update user":o.mergeUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,uid:n.personalID,firstname:n.firstName,lastname:n.lastName,pw:n.password,reviser:n.reviser,workplace:n.workplace});break;case"validate email token":o.validateEmailToken({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,token:n.token,email:n.email});break;case"resend validate email token":o.resendValidateEmailToken({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,token:n.token,language:n.language});break;case"validate password reset token":o.validatePasswordResetToken({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,token:n.token,email:n.email});break;case"reset password":o.resetPassword({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,language:n.language});break;case"upload file":console.log("UPLOAD FILE DATA:",data);const e=n.acceptedFiles[0],s=data.session,i=global.appRoot+"/uploads/"+s,u=t();r.existsSync(i)||r.mkdirSync(i),a.fromBuffer(e).then(s=>{let a=s.ext;r.writeFile(i+"/"+u+"."+a,e,e=>{if(e)return console.log(e);o.uploadFile({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p})})});break;case"get user":o.getUser({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email});break;case"get currencies":o.getCurrencies({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,page:n.page-1,limit:n.limit});break;case"register user language":o.mergeUserLanguage({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,language:n.language});break;case"register user currency":o.mergeUserCurrency({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,currency_id:n.currency_id});break;case"get user businesses":o.getBusiness({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:n.uid,page:n.page-1,limit:n.limit});break;case"get business purposes":o.getPurpose({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,business_id:n.business_id,language:n.language,page:n.page-1,limit:n.limit});break;case"get cart purposes":o.getCartPurposes({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,purposes:n.purposes,language:n.language,page:n.page-1,limit:n.limit});break;case"get purpose shareholders":o.getShare({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,purpose_id:n.purpose_id});break;case"get business by id":o.getBusinessById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,id:n.id});break;case"get purpose by id":o.getPurposeById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,id:n.id,language:n.language});break;case"get shareholder by id":o.getShareholderById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,id:n.id});break;case"get currency by id":o.getCurrencyById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,id:n.id});break;case"get transaction by id":o.getTransactionById({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,id:n.id,language:n.language});break;case"register currency":o.mergeCurrency({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:n.uid,curr_title:n.curr_title,abbr:n.curr_abbr,rate:n.curr_rate,region:n.curr_region,reviser:n.reviser,workplace:n.workplace});break;case"register business":o.mergeBusiness({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:n.uid,title:n.businessTitle,description:n.businessDescription,reviser:n.reviser,workplace:n.workplace});break;case"register purpose":o.addPurpose({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:n.uid,language:n.language,business_id:n.businessID,title:n.purposeTitle,description:n.purposeDescription,reviser:n.reviser,workplace:n.workplace});break;case"change purpose status":o.changePurposeStatus({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,purpose_id:n.purpose_id,status:n.purpose_status,reviser:n.reviser,workplace:n.workplace});break;case"update purpose property":o.updatePurposeProps({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,purpose_id:n.purposeID,title:n.purposeTitle,description:n.purposeDescription,language:n.language,reviser:n.reviser,workplace:n.workplace});break;case"register shareholder":o.mergeShareholder({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,purpose_id:n.purposeID,shareholder_id:n.personalID,roles:n.shareholderRoles,share:n.shares,reviser:n.reviser,workplace:n.workplace});break;case"change share":o.mergeShareholder({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,purpose_id:n.purpose_id,shareholder_id:n.shareholder_id,share:n.share,reviser:n.reviser,workplace:n.workplace});break;case"remove shareholder":o.removeShareholder({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,purpose_id:n.purpose_id,shareholder_id:n.shareholder_id,reviser:n.reviser,workplace:n.workplace});break;case"transfer U2S":o.transferU2S({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,toAccount:n.toAccount,amount:n.amount,reviser:n.reviser,workplace:n.workplace});break;case"get cart":o.getCart({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,customer:n.customer,cart:n.cart});break;case"get tan":o.getTAN({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,language:n.language,reviser:n.reviser,workplace:n.workplace});break;case"submit tan":o.processTAN({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,email:n.email,tan:n.tan,reviser:n.reviser,workplace:n.workplace});break;case"save cart":o.saveCart({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,cartid:n.cartid,content:n.content,merchant:n.merchant,reviser:n.reviser,workplace:n.workplace});break;case"transfer U2U":o.transferU2U({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,recipient_id:n.toPersonalID,amount:n.amount,description:n.description,reviser:n.reviser,workplace:n.workplace});break;case"transfer U2B":o.transferU2B({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,uid:data.uid,sender_id:n.uid,fromAccount:n.fromAccount,purpose_id:n.purposeID,currency:n.currency,amount:n.amount,description:n.description,reviser:n.reviser,workplace:n.workplace});break;default:console.log("Unknown request: "+data.req),p({req:data.req,session:data.session,reqData:n,onStatusChange:c,onError:p,error:{code:"UNKNOWN_REQUEST"},context:["ProcessRequest.js","userRequest","switch default"],query:null})}}}},function(e,n){e.exports=require("fs")},function(e,n){e.exports=require("file-type")},function(e,n,s){const r=new(s(16).EventEmitter),a=s(2),t=s(17),o=(s(3),s(19)),i=s(20),u="_hjs_722m_GHAE_";r.on("error",(function(e){console.log("Error: "+e.code)})),e.exports={getSequence:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,birthdate:i=null,timezone:u=null,uid:l=null,status:c=null,reviser:p=null,workplace:d=null})=>{let E=[],S=[],g=[];u=u.slice(5),E[0]="UPDATE users",S[0]="\n    UPDATE users\n    SET sequence = COALESCE(\n        (\n            SELECT seqplus FROM \n            (\n                SELECT MAX(u2.sequence) + 1 as seqplus\n                FROM users AS u2\n                WHERE DATE(u2.birthdate) = DATE(?)\n                AND u2.timezone = ?\n            ) as x\n    \t), 0\n    )\n    WHERE email = ?\n    ",g[0]=[i,u,o],E[1]="SELECT FROM users",S[1]="\n    SELECT sequence\n    FROM users\n    WHERE email = ?\n    ",g[1]=[o];let m=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:o,uid:l,name:E[0],sql:S[0],values:g[0]},{name:E[1],sql:S[1],values:g[1]}];return t.mergeIntoDb(m)},mergeUser:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:l=(()=>{}),uid:c=null,firstname:p=null,lastname:d=null,email:E=null,birthdate:S=null,timezone:g=null,scode:m=null,tcode:T=null,sequence:_=null,pw:q=null,website:A=null,phone:C=null,acc_curr:D=null,acc_cred:h=null,acc_save:I=null,language:b=null,status:v=null,validateEmail:O=!1,reviser:N=null,workplace:k=null})=>{let R=[],L=[],U=[];if(null===c&&null!==m&&null!==T&&null!==_){const r=o.getChecksum(`${T}${_}`);if(c=`U${m}${parseInt(_).toString(16).padStart(4,"0")}${r}`,!o.validate(c))return void l({req:e,reqData:n,session:s,error:{code:"CHECKSUM_FAILED"},context:["db.js","mergeUser",c]})}R[0]="INSERT INTO users",L[0]="\n    INSERT INTO users (firstname, lastname, email, pw, acc_curr, acc_cred, acc_save, allowance_date, language, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, 0, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    uid = COALESCE(?, uid)\n    , firstname = COALESCE(?, firstname)\n    , lastname = COALESCE(?, lastname)\n    , email = COALESCE(?, email)\n    , pw = COALESCE(?, pw)\n    , birthdate = COALESCE(?, birthdate)\n    , timezone = COALESCE(?, timezone)\n    , website = COALESCE(?, website)\n    , phone = COALESCE(?, phone)\n    , acc_curr = COALESCE(?, acc_curr)\n    , acc_cred = COALESCE(?, acc_cred)\n    , acc_save = COALESCE(?, acc_save)\n    , language = COALESCE(?, language)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",U[0]=[p,d,E,null!==q?i(`${u}${q}`):null,0,1e3,0,b,N,k,c,p,d,E,null!==q?i(`${u}${q}`):null,S,g,A,C,D,h,I,b,v,N,k];let M=null;O&&(M=a.randomBytes(64).toString("base64"),R[1]="INSERT INTO validation_tokens",L[1]="\n    INSERT INTO validation_tokens (type, email, token, expiration, status, created, reviser, workplace)\n    VALUES ('email', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR), ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE\n    status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",U[1]=[E,M,0,N,k,v,N,k]);let f=[{req:e,reqData:n,session:s,onStatusChange:r,onError:l,email:E,tags:{token:M,email:E,language:b},uid:c,name:R[0],sql:L[0],values:U[0]}];return O&&f.push({name:R[1],sql:L[1],values:U[1]}),t.mergeIntoDb(f)},mergeBusiness:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,title:i=null,description:u=null,status:l=0,reviser:c=null,workplace:p=null})=>{let d=[],E=[],S=[];d[0]="INSERT INTO businesses",E[0]="\n    INSERT INTO businesses (title, description, owner_id, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    description = COALESCE(?, description)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n  ",S[0]=[i,u,o,l,c,p,u,l,c,p];let g=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,uid:o,name:d[0],sql:E[0],values:S[0]}];return t.mergeIntoDb(g)},mergeCurrency:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,curr_title:i=null,abbr:u=null,rate:l=null,region:c=null,status:p=0,reviser:d=null,workplace:E=null})=>{let S=[],g=[],m=[];S[0]="INSERT INTO currencies",g[0]="\n    INSERT INTO currencies (name, abbr, rate, region, status, created, reviser, workplace)\n    VALUES (?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE \n    name = COALESCE(?, name)\n    , abbr = COALESCE(?, abbr)\n    , rate = COALESCE(?, rate)\n    , region = COALESCE(?, region)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n  ",m[0]=[i,u,l,c,p,d,E,i,u,l,c,p,d,E];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,uid:o,name:S[0],sql:g[0],values:m[0]}];return t.mergeIntoDb(T)},getTAN:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,language:i=null,status:u=null,reviser:l=null,workplace:c=null})=>{let p=[],d=[],E=[];const S=(g=1e5,m=999999,g=Math.ceil(g),m=Math.floor(m),Math.floor(Math.random()*(m-g+1))+g).toString();var g,m;p[0]="INSERT INTO tans",d[0]="\n  INSERT INTO tans (type, email, tan, expiration, status, created, reviser, workplace)\n  VALUES ('email', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 15 MINUTE), ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  tan = COALESCE(?, tan)\n  , expiration = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 15 MINUTE)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",E[0]=[o,S,0,l,c,S,0,l,c];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:o,tags:{token:S,email:o,language:i},name:p[0],sql:d[0],values:E[0]}];return t.mergeIntoDb(T)},processTAN:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,tan:i=null,status:u=null,reviser:l=null,workplace:c=null})=>{let p=[],d=[],E=[];p[0]="UPDATE tans",d[0]="\n    UPDATE tans\n    SET status = ?\n    WHERE type = 'email'\n    AND email = ? \n    AND tan = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",E[0]=[1,o,i];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:p[0],sql:d[0],values:E[0]}];return t.mergeIntoDb(S)},saveCart:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),type:o="default",cartid:i=null,content:u=null,merchant:l=null,customer:c=null,status:p=null,reviser:d=null,workplace:E=null})=>{let S=[],g=[],m=[];S[0]="INSERT INTO carts",g[0]="\n  INSERT INTO carts (type, cartid, content, expiration, merchant, status, created, reviser, workplace)\n  VALUES (?, ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 6 HOUR), ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  customer = COALESCE(?, customer)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",m[0]=[o,i,u,l,0,d,E,c,p,d,E];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:S[0],sql:g[0],values:m[0]}];return t.mergeIntoDb(T)},getCart:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),customer:o=null,cart:i=null})=>{let u=[],l=[],c=[];u[0]="SELECT carts",l[0]="\n    SELECT type, cartid, content\n    FROM carts\n    WHERE cartid = ?  \n    AND expiration >= UTC_TIMESTAMP()\n    AND status = 0\n    ",c[0]=[i],u[1]="UPDATE carts",l[1]="\n    UPDATE carts\n    SET customer = ?\n    WHERE cartid = ?  \n    ",c[1]=[o,i];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]},{name:u[1],sql:l[1],values:c[1]}];return t.mergeIntoDb(p)},transferU2S:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:l=null,amount:c=null,reviser:p=null,workplace:d=null})=>{if(c<=0)return void a({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2S","amount <= 0"]});let E=[],S=[],g=[];E[0]="UPDATE users",S[0]=`\n    UPDATE users\n    SET ${u} = ${u} - ?,\n    ${l} = ${l} + ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    AND ${u} - ? >= 0\n    `,g[0]=[c,c,p,d,i,c],E[1]="INSERT INTO transactions",S[1]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",g[1]=[e,c,i],E[2]="INSERT INTO transaction_positions",S[2]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",g[2]=[c,i,u,l];let m=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,uid:o,name:E[0],sql:S[0],values:g[0]},{name:E[1],sql:S[1],values:g[1]},{name:E[2],sql:S[2],values:g[2]}];return t.mergeIntoDb(m)},transferU2U:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:l="acc_curr",recipient_id:c=null,amount:p=null,description:d=null,reviser:E=null,workplace:S=null})=>{if(p<=0)return void a({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2U","amount <= 0"]});let g=[],m=[],T=[];g[0]="UPDATE sender",m[0]=`\n    UPDATE users\n    SET ${u} = ${u} - ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    AND ${u} - ? >= 0\n    `,T[0]=[p,E,S,i,p],g[1]="UPDATE recipient",m[1]=`\n  UPDATE users\n  SET ${l} = ${l} + ?,\n  reviser = ?,\n  workplace = ?\n  WHERE uid = ?\n  `,T[1]=[p,E,S,c],g[2]="INSERT INTO transactions",m[2]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, comment, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",T[2]=[e,p,i,d],g[3]="INSERT INTO transaction_positions",m[3]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",T[3]=[p,c,u,l];let _=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,uid:o,name:g[0],sql:m[0],values:T[0]},{name:g[1],sql:m[1],values:T[1]},{name:g[2],sql:m[2],values:T[2]},{name:g[3],sql:m[3],values:T[3]}];return t.mergeIntoDb(_)},transferU2B:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,sender_id:i=null,fromAccount:u=null,toAccount:l="acc_curr",purpose_id:c=null,currency:p="Z",amount:d=null,description:E=null,reviser:S=null,workplace:g=null})=>{if(d<=0)return void a({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferU2B","amount <= 0"]});let m=[],T=[],_=[];m[0]="UPDATE sender",T[0]=`\n    UPDATE users\n    SET ${u} = ${u} - ?,\n    reviser = ?,\n    workplace = ?\n    WHERE uid = ?\n    `,_[0]=[d,S,g,i],m[1]="UPDATE shareholders",T[1]=`\n  UPDATE users AS u\n  LEFT JOIN shares AS s1 ON s1.shareholder_id = u.uid\n  LEFT JOIN purposes AS p ON p.purpose_id = s1.purpose_id\n  SET u.${l} = u.${l} + ? / \n    (\n      SELECT SUM(s2.share) \n      FROM shares AS s2 \n      WHERE s2.purpose_id = s1.purpose_id\n    ) * s1.share,\n  u.reviser = ?,\n  u.workplace = ?\n  WHERE p.purpose_id = ?\n  `,_[1]=[d,S,g,c],m[2]="INSERT INTO transactions",T[2]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, sender_id, purpose_id, comment, created, reviser, workplace)\n  VALUES (?, ?, ?, (SELECT rate FROM currencies WHERE abbr = ?), ?, ?, ?, UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM')",_[2]=[e,d,p,p,i,c,E],m[3]="INSERT INTO transaction_positions",T[3]=`\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, roles, share, share_per_cent, from_account, to_account, created, reviser, workplace)\n  SELECT '[INSERT_ID]', \n  (\n    ? / \n    (\n      SELECT SUM(s2.share) \n      FROM shares AS s2 WHERE \n      s2.purpose_id = s1.purpose_id\n    ) * s1.share\n  ) AS amount,\n  s1.shareholder_id, s1.roles, s1.share,\n  (\n    100 / \n    (\n      SELECT SUM(s3.share) \n      FROM shares AS s3 WHERE \n      s3.purpose_id = s1.purpose_id\n    ) * s1.share\n  ) AS share_per_cent,\n  '${u}', '${l}', UTC_TIMESTAMP(), 'SYSTEM', 'SYSTEM'\n  FROM shares AS s1\n  LEFT JOIN purposes AS p ON p.purpose_id = s1.purpose_id\n  LEFT JOIN users AS u ON u.uid = s1.shareholder_id\n  WHERE s1.purpose_id = ?\n  `,_[3]=[d,c];const q=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,uid:o,name:m[0],sql:T[0],values:_[0]},{name:m[1],sql:T[1],values:_[1]},{name:m[2],sql:T[2],values:_[2]},{name:m[3],sql:T[3],values:_[3]}];return t.mergeIntoDb(q)},transferV2U:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),fromAccount:o="vault",toAccount:i="acc_save",recipient_id:u=null,amount:l=48,description:c="allowance",reviser:p="VAULT",workplace:d="SYSTEM"})=>{if(l<=0)return void a({req:e,reqData:n,session:s,error:{code:"INVALID_AMOUNT"},context:["db.js","transferV2U","amount <= 0"]});let E=[],S=[],g=[];E[0]="UPDATE vault",S[0]="\n    UPDATE vault\n    SET acc = acc - ?,\n    reviser = ?,\n    workplace = ?\n    AND acc - ? >= 0\n    ",g[0]=[l,p,d,l],E[1]="UPDATE recipient",S[1]=`\n  UPDATE users\n  SET ${i} = ${i} + ?,\n  allowance_date = DATE(UTC_TIMESTAMP()),\n  reviser = ?,\n  workplace = ?\n  WHERE uid = ?\n  AND (allowance_date < DATE(UTC_TIMESTAMP()) OR allowance_date IS null)\n  `,g[1]=[l,p,d,u],E[2]="INSERT INTO transactions",S[2]="\n  INSERT INTO transactions (type, amount, currency, exchange_rate, comment, created, reviser, workplace)\n  VALUES (?, ?, 'Z', 1.0, ?, UTC_TIMESTAMP(), ?, ?)",g[2]=[e,l,c,p,d],E[3]="INSERT INTO transaction_positions",S[3]="\n  INSERT INTO transaction_positions (transaction_id, amount, recipient_id, from_account, to_account, created, reviser, workplace)\n  VALUES ('[INSERT_ID]', ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)",g[3]=[l,u,o,i,p,d];let m=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:E[0],sql:S[0],values:g[0]},{name:E[1],sql:S[1],values:g[1]},{name:E[2],sql:S[2],values:g[2]},{name:E[3],sql:S[3],values:g[3]}];return t.mergeIntoDb(m)},initUser:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null})=>{let i=[],u=[],l=[],c=-1;c++,i[c]="UPDATE last seen user",u[c]="\n    UPDATE users\n    SET last_seen = UTC_TIMESTAMP()\n    WHERE email = ?\n    ",l[c]=[o];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(p)},getUriSettings:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uri:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT FROM uri_settings",u[0]="\n    SELECT settings\n    FROM uri_settings\n    WHERE uri = ?\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},signInUser:({req:e=null,reqData:n=null,session:r=null,onStatusChange:a=(()=>{}),onError:o=(()=>{}),email:l=null,ip:c=null,pw:p=null})=>{const d=c,E=s(21).lookup(d);let S=[],g=[],m=[],T=-1;T++,S[T]="SELECT users",g[T]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.sequence, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, u.last_seen, TIME_TO_SEC(TIMEDIFF(UTC_TIMESTAMP(), last_seen)) seconds_since_last_seen, u.language, u.status, u.ts,\n    c.name AS currency_name, c.abbr AS currency_abbr, c.rate AS currency_rate, c.status AS currency_status\n    FROM users AS u\n    INNER JOIN currencies AS c ON c.abbr = u.currency_id\n    WHERE u.email = ? AND u.pw = ?\n    ",m[T]=[l,i(`${u}${p}`)],T++,S[T]="INSERT INTO user_connection",g[T]="\n    INSERT INTO user_connection (\n      email, date, ip, connections, \n      country, region, eu, timezone, city, gps_lat, gps_lon, metro, area, \n      created, reviser, workplace\n    )\n    VALUES (\n      ?, UTC_TIMESTAMP(), ?, 1,\n      ?, ?, ?, ?, ?, ?, ?, ?, ?,\n      UTC_TIMESTAMP(), 'SYS', 'SYSTEM'\n    )\n    ON DUPLICATE KEY UPDATE \n    connections = connections + 1\n    ",m[T]=[l,d,null===E?null:E.country,null===E?null:E.region,null===E?null:E.eu,null===E?null:E.timezone,null===E?null:E.city,null===E?null:E.gps_lat,null===E?null:E.gps_lon,null===E?null:E.metro,null===E?null:E.area];let _=[{req:e,reqData:n,session:r,onStatusChange:a,onError:o,name:S[0],sql:g[0],values:m[0]},{name:S[1],sql:g[1],values:m[1]}];return t.mergeIntoDb(_)},lastSeenUser:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null})=>{let i=[],u=[],l=[];i[0]="UPDATE users",u[0]="\n    UPDATE users\n    SET last_seen = UTC_TIMESTAMP()\n    WHERE email = ?\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:()=>{},onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},resetPassword:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:o=(()=>{}),uid:i=null,email:u=null,status:l=0,language:c=null,reviser:p=null,workplace:d=null})=>{let E=[],S=[],g=[],m=a.randomBytes(64).toString("base64");E[0]="INSERT INTO validation_tokens",S[0]="\n    INSERT INTO validation_tokens (type, email, token, expiration, status, created, reviser, workplace)\n    VALUES ('password', ?, ?, DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR), ?, UTC_TIMESTAMP(), ?, ?)\n    ON DUPLICATE KEY UPDATE\n    token = COALESCE(?, token)\n    , expiration = DATE_ADD(UTC_TIMESTAMP(), INTERVAL 1 HOUR)\n    , status = COALESCE(?, status)\n    , reviser = COALESCE(?, reviser)\n    , workplace = COALESCE(?, workplace)\n    ",g[0]=[u,m,0,p,d,m,l,p,d];let T=[{req:e,reqData:n,session:s,onStatusChange:r,onError:o,email:u,tags:{token:m,email:u,language:c},uid:i,name:E[0],sql:S[0],values:g[0]}];return t.mergeIntoDb(T)},getUser:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT users",u[0]="\n    SELECT u.uid, u.firstname, u.lastname, u.email, u.acc_curr, u.acc_cred, u.acc_save, u.website, u.phone, c.name AS currency_name, c.abbr AS currency_abbr, u.language, u.status, u.ts \n    FROM users AS u\n    INNER JOIN currencies AS c ON c.abbr = u.currency_id\n    WHERE u.email = ? AND u.status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},uploadFile:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{})})=>{let o=[],i=[],u=[];o[0]="SELECT 1",i[0]="SELECT COUNT(*) AS count_users FROM users WHERE status = 1",u[0]=[];let l=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:o[0],sql:i[0],values:u[0]}];return t.mergeIntoDb(l)},getAccount:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,timeout:i=300,checkTimeout:u=!0})=>{let l=[],c=[],p=[];l[0]="SELECT users",c[0]="\n    SELECT uid, firstname, lastname, email, sequence, acc_curr, acc_cred, acc_save, website, phone, last_seen, TIME_TO_SEC(TIMEDIFF(UTC_TIMESTAMP(), last_seen)) seconds_since_last_seen, status, ts \n    FROM users \n    WHERE uid = ?\n    AND (? OR TIME_TO_SEC(TIMEDIFF(UTC_TIMESTAMP(), last_seen)) <= ?)\n    ",p[0]=[o,u,i];let d=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:l[0],sql:c[0],values:p[0]}];return t.mergeIntoDb(d)},getBusiness:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,page:i=0,limit:u=1})=>{let l=[],c=[],p=[];l[0]="SELECT businesses",c[0]="\n    SELECT business_id, title, description, link, image, status, DATE_FORMAT(created, '%Y-%m-%d %H:%i:%s') as created\n    FROM businesses \n    WHERE owner_id = ? AND status < 2\n    LIMIT ? OFFSET ?\n    ",p[0]=[o,u,i*u],l[1]="COUNT businesses",c[1]="\n    SELECT COUNT(*) as count_businesses\n    FROM businesses\n    WHERE owner_id = ?\n  ",p[1]=[o];let d=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:l[0],sql:c[0],values:p[0]},{name:l[1],sql:c[1],values:p[1]}];return t.mergeIntoDb(d)},getBusinessById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT businesses",u[0]="\n    SELECT business_id, title, description, link, image, status, DATE_FORMAT(created, '%Y-%m-%d %H:%i:%s') as created\n    FROM businesses \n    WHERE id = ? AND status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getCartPurposes:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purposes:o=null,language:i=null,page:u=0,limit:l=5})=>{let c=[],p=[],d=[];const E=JSON.parse(o);c[0]="SELECT purposes",p[0]="\n    SELECT p.business_id, p.purpose_id, pp.title, pp.description, pp.link, pp.image, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM purposes AS p\n    LEFT JOIN purpose_props AS pp ON pp.purpose_id = p.purpose_id\n    WHERE p.purpose_id IN (?) \n    AND p.status = 1\n    AND pp.language = ?\n    ORDER BY pp.title\n    LIMIT ? OFFSET ?\n    ",d[0]=[E,i,l,u*l],c[1]="COUNT purposes",p[1]="\n    SELECT COUNT(*) as count_purposes\n    FROM purposes\n    WHERE purpose_id IN (?)\n    AND status = 1\n  ",d[1]=[E];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:c[0],sql:p[0],values:d[0]},{name:c[1],sql:p[1],values:d[1]}];return t.mergeIntoDb(S)},getPurpose:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),business_id:o=null,language:i=null,page:u=0,limit:l=5})=>{let c=[],p=[],d=[];c[0]="SELECT purposes",p[0]="\n  SELECT p.id, p.business_id, p.purpose_id, COALESCE(pp.title, p.title) AS title, COALESCE(pp.description, p.description) AS description, pp.link, pp.image, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n  FROM purposes AS p\n  LEFT JOIN purpose_props AS pp\n    ON pp.purpose_id = p.purpose_id\n    AND (pp.language = ? OR pp.language IS NULL)\n  WHERE p.business_id = ?\n  AND p.status < 2\n  ORDER BY pp.title\n  LIMIT ? OFFSET ?\n    ",d[0]=[i,o,l,u*l],c[1]="COUNT purposes",p[1]="\n    SELECT COUNT(*) as count_purposes\n    FROM purposes\n    WHERE business_id = ?\n    AND status < 2\n  ",d[1]=[o];let E=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:c[0],sql:p[0],values:d[0]},{name:c[1],sql:p[1],values:d[1]}];return t.mergeIntoDb(E)},getPurposeById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="SELECT purposes",l[0]="\n    SELECT p.id, p.business_id, p.purpose_id, pp.title, pp.description, pp.link, pp.image, p.status, DATE_FORMAT(p.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM purposes AS p\n    LEFT JOIN purpose_props AS pp ON pp.purpose_id = p.purpose_id\n    WHERE p.id = ? \n    AND p.status < 2\n    AND pp.language = ?\n    ",c[0]=[o,i];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},getShare:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT shares",u[0]="\n    SELECT s.purpose_id, s.shareholder_id, u.firstname, u.lastname, u.email, s.title, s.description, s.roles, s.share, s.status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM shares as s\n    INNER JOIN users as u ON u.uid = s.shareholder_id\n    WHERE s.purpose_id = ? \n    AND s.status < 2\n    AND u.status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getShareholderById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT shares",u[0]="\n    SELECT s.purpose_id, s.shareholder_id, u.firstname, u.lastname, u.email, s.title, s.description, s.roles, s.share, s.status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as created\n    FROM shares as s\n    INNER JOIN users as u ON u.uid = s.shareholder_id\n    WHERE s.id = ?  \n    AND s.status < 2\n    AND u.status < 2\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getCurrencyById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT currencies",u[0]="\n    SELECT c.name, c.abbr, c.rate, c.region, c.status, DATE_FORMAT(c.created, '%Y-%m-%d %H:%i:%s') as created, COUNT(cs.abbr) AS sponsors\n    FROM currencies as c\n    LEFT JOIN currency_sponsors as cs ON cs.abbr = c.abbr\n    WHERE c.id = ?  \n    AND c.status < 2\n    GROUP BY c.abbr\n    ",l[0]=[o];let c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)},getTransactionById:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),id:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="SELECT transaction_positions",l[0]="\n    SELECT (tp.amount * t.exchange_rate) as conv_amount, tp.to_account, tp.roles, tp.share, tp.share_per_cent,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') as created,\n    u.firstname, u.lastname, u.status AS sender_status,\n    pp.title AS purpose_title, pp.description AS purpose_description, pp.link AS purpose_link, pp.image AS purpose_image, p.status AS purpose_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status\n    FROM transaction_positions AS tp \n    LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n    LEFT JOIN users AS u ON u.uid = t.sender_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN purpose_props AS pp ON pp.purpose_id = p.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE tp.id = ?\n    AND pp.language = ?\n    ",c[0]=[o,i];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},getCurrencies:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),page:o=0,limit:i=5})=>{let u=[],l=[],c=[];u[0]="SELECT currencies",l[0]="\n    SELECT c.name, c.abbr, c.rate, c.region, c.status, DATE_FORMAT(c.created, '%Y-%m-%d %H:%i:%s') as created, COUNT(cs.abbr) AS sponsors\n    FROM currencies AS c\n    LEFT JOIN currency_sponsors AS cs ON cs.abbr = c.abbr\n    WHERE c.status < 2\n    GROUP BY c.abbr\n    ORDER BY sponsors DESC, c.abbr\n    LIMIT ? OFFSET ?\n    ",c[0]=[i,o*i],u[1]="COUNT currencies",l[1]="\n    SELECT COUNT(*) count_currencies FROM currencies;\n  ",c[1]=[];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]},{name:u[1],sql:l[1],values:c[1]}];return t.mergeIntoDb(p)},getTransactions:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,page:u=0,limit:l=5})=>{let c=[],p=[],d=[];c[0]="SELECT transactions",p[0]="\n  SELECT *\n  FROM (\n    SELECT 'sender' AS tid, (tp.amount * t.exchange_rate) as conv_amount, tp.from_account AS from_account, tp.to_account AS to_account, tp.recipient_id, tp.roles, tp.share, tp.share_per_cent, \n    us.firstname AS sender_firstname, us.lastname AS sender_lastname, us.status AS sender_status,\n    ur.firstname AS recipient_firstname, ur.lastname AS recipient_lastname, ur.status AS recipient_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') AS created\n    FROM transaction_positions AS tp \n    LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n    LEFT JOIN users AS us ON us.uid = t.sender_id\n    LEFT JOIN users AS ur ON ur.uid = tp.recipient_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE tp.recipient_id = ?\n\n    UNION ALL\n\n    SELECT 'receiver' AS tid, (t.amount * t.exchange_rate) as conv_amount, tp.from_account AS from_account, tp.to_account AS to_account, '-' AS recipient_id, '-' AS roles, '-' AS share, '-' AS share_per_cent,\n    us.firstname AS sender_firstname, us.lastname AS sender_lastname, us.status AS sender_status,\n    ur.firstname AS recipient_firstname, ur.lastname AS recipient_lastname, ur.status AS recipient_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    p.title AS purpose_title, p.description AS purpose_description, p.status AS purpose_status,\n    t.type, t.currency, t.exchange_rate, t.sender_id, t.purpose_id, t.comment, DATE_FORMAT(t.created, '%Y-%m-%d %H:%i:%s') AS created\n    FROM transactions AS t\n    LEFT JOIN transaction_positions AS tp ON tp.transaction_id = t.transaction_id\n    LEFT JOIN users AS us ON us.uid = t.sender_id\n    LEFT JOIN users AS ur ON ur.uid = tp.recipient_id\n    LEFT JOIN purposes as p ON p.purpose_id = t.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    WHERE t.sender_id = ?\n    GROUP BY tp.transaction_id\n    \n  ) a\n  ORDER BY created DESC, conv_amount\n  LIMIT ? OFFSET ?\n    ",d[0]=[o,o,l,u*l],c[1]="COUNT transactions",p[1]="\n    SELECT\n    (\n      SELECT COUNT(*)\n      FROM transaction_positions AS tp\n      LEFT JOIN transactions AS t ON t.transaction_id = tp.transaction_id\n      WHERE tp.recipient_id = ?\n    ) +\n    (\n      SELECT COUNT(*)\n      FROM transactions\n      WHERE sender_id = ?\n    )\n    AS count_transaction_positions\n  ",d[1]=[o,o];let E=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:c[0],sql:p[0],values:d[0]},{name:c[1],sql:p[1],values:d[1]}];return t.mergeIntoDb(E)},getShares:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,page:u=0,limit:l=5})=>{let c=[],p=[],d=[];c[0]="SELECT shares",p[0]="\n    SELECT s.shareholder_id, s.purpose_id, s.title AS shares_title, s.description AS shares_description, s.roles AS shares_roles, s.share AS shares_share, s.status AS shares_status, DATE_FORMAT(s.created, '%Y-%m-%d %H:%i:%s') as shares_created,\n    pp.title AS purpose_title, pp.description AS purpose_description, pp.link AS purpose_link, pp.image AS purpose_image, p.status AS purpose_status,\n    b.business_id, b.title AS business_title, b.description AS business_description, b.link AS business_link, b.image AS business_image, b.status AS business_status,\n    o.uid AS owner_uid, o.firstname AS owner_firstname, o.lastname AS owner_lastname, o.status AS owner_status,\n    (\n      100 / \n      (\n        SELECT SUM(s2.share) \n        FROM shares AS s2 \n        WHERE s2.purpose_id = s.purpose_id\n      ) * s.share\n    ) AS share_per_cent\n    FROM shares AS s\n    LEFT JOIN purposes as p ON p.purpose_id = s.purpose_id\n    LEFT JOIN purpose_props AS pp ON pp.purpose_id = p.purpose_id\n    LEFT JOIN businesses as b ON b.business_id = p.business_id\n    LEFT JOIN users as o ON o.uid = b.owner_id\n    WHERE s.shareholder_id = ?\n    AND s.status < ?\n    AND pp.language = ?\n    ORDER BY shares_created DESC, shares_title\n    LIMIT ? OFFSET ?\n    ",d[0]=[o,2,i,l,u*l],c[1]="COUNT shares",p[1]="\n    SELECT COUNT(*) as count_shares\n    FROM shares\n    WHERE shareholder_id = ?\n  ",d[1]=[o];let E=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:c[0],sql:p[0],values:d[0]},{name:c[1],sql:p[1],values:d[1]}];return t.mergeIntoDb(E)},updatePurposeProps:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null,language:i=null,title:u=null,description:l=null,link:c=null,image:p=null,status:d=0,reviser:E=null,workplace:S=null})=>{let g=[],m=[],T=[];g[0]="MERGE purpose_props",m[0]="\n  INSERT INTO purpose_props (purpose_id, language, title, description, link, image, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE\n  title = COALESCE(?, title)\n  , description = COALESCE(?, description)\n  , link = COALESCE(?, link)\n  , image = COALESCE(?, image)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)\n  ",T[0]=[o,i,u,l,c,p,d,E,S,u,l,c,p,d,E,S,o,i];let _=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:g[0],sql:m[0],values:T[0]}];return t.mergeIntoDb(_)},addPurpose:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,language:i=null,business_id:u=null,purpose_id:l=null,title:c=null,description:p=null,link:d=null,image:E=null,status:S=0,reviser:g=null,workplace:m=null})=>{let T=[],_=[],q=[];T[0]="INSERT INTO purposes",_[0]="\n  INSERT INTO purposes (business_id, purpose_id, title, description, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ",q[0]=[u,l,c,p,S,g,m],T[1]="INSERT INTO purpose_props",_[1]="\n  INSERT INTO purpose_props (purpose_id, language, title, description, link, image, status, created, reviser, workplace)\n  VALUES ( (SELECT purpose_id FROM purposes WHERE id = [INSERT_ID]), ?, ?, ?, ?, ?, 0, UTC_TIMESTAMP(), ?, ?)\n  ",q[1]=[i,c,p,d,E,g,m];let A=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,uid:o,name:T[0],sql:_[0],values:q[0]},{name:T[1],sql:_[1],values:q[1]}];return t.mergeIntoDb(A)},changePurposeStatus:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),purpose_id:o=null,status:i=0,reviser:u=null,workplace:l=null})=>{let c=[],p=[],d=[];c[0]="UPDATE purposes",p[0]="\n  UPDATE purposes\n  SET status = ?\n  WHERE purpose_id = ?\n  ",d[0]=[i,o];let E=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:c[0],sql:p[0],values:d[0]}];return t.mergeIntoDb(E)},mergeShareholder:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,purpose_id:i=null,shareholder_id:u=null,roles:l=null,share:c=null,title:p=null,description:d=null,status:E=0,reviser:S=null,workplace:g=null})=>{let m=[],T=[],_=[];m[0]="INSERT INTO shares",T[0]="\n  INSERT INTO shares (purpose_id, shareholder_id, title, description, roles, share, status, created, reviser, workplace)\n  VALUES (?, ?, ?, ?, ?, ?, ?, UTC_TIMESTAMP(), ?, ?)\n  ON DUPLICATE KEY UPDATE \n  title = COALESCE(?, title)\n  , description = COALESCE(?, description)\n  , roles = COALESCE(?, roles)\n  , share = COALESCE(?, share)\n  , status = COALESCE(?, status)\n  , reviser = COALESCE(?, reviser)\n  , workplace = COALESCE(?, workplace)",_[0]=[i,u,p,d,l,c,E,S,g,p,d,l,c,E,S,g];let q=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,email:null,uid:o,name:m[0],sql:T[0],values:_[0]}];return t.mergeIntoDb(q)},removeShareholder:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null,purpose_id:i=null,shareholder_id:u=null,reviser:l=null,workplace:c=null})=>{let p=[],d=[],E=[];p[0]="UPDATE shares",d[0]="\n  UPDATE shares\n  SET share = ?\n  , status = ?\n  WHERE purpose_id = ? AND shareholder_id = ?\n  ",E[0]=[0,2,i,u];let S=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:p[0],sql:d[0],values:E[0],uid:o,email:null}];return t.mergeIntoDb(S)},mergeUserLanguage:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,language:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE users",l[0]="\n    UPDATE users \n    SET language = ?\n    WHERE email = ?\n    ",c[0]=[i,o];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},mergeUserCurrency:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,currency_id:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE users",l[0]="\n    UPDATE users \n    SET currency_id = ?\n    WHERE email = ?\n    ",c[0]=[i,o];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},validateEmailToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),token:o=null,email:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE validation tokens",l[0]="\n    UPDATE validation_tokens\n    SET status = ?\n    WHERE type = 'email'\n    AND email = ? \n    AND token = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",c[0]=[1,i,o],u[1]="UPDATE users",l[1]="\n    UPDATE users\n    SET status = ?\n    WHERE email = ? \n    ",c[1]=[1,i];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]},{name:u[1],sql:l[1],values:c[1]}];return t.mergeIntoDb(p)},resendValidateEmailToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),email:o=null,token:i=null,language:u=null})=>{let l=[],c=[],p=[];l[0]="UPDATE validation tokens",c[0]="\n    UPDATE validation_tokens\n    SET resent = resent + 1\n    WHERE type = 'email'\n    AND email = ? \n    AND token = ?\n    AND status = 0\n    AND expiration >= UTC_TIMESTAMP()\n    ",p[0]=[o,i],l[1]="SELECT validation_tokens",c[1]="\n    SELECT resent\n    FROM validation_tokens\n    WHERE email = ?\n    AND type = 'email' \n    ",p[1]=[o];let d=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,tags:{token:i,email:o,language:u},name:l[0],sql:c[0],values:p[0]},{name:l[1],sql:c[1],values:p[1]}];return t.mergeIntoDb(d)},validatePasswordResetToken:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),token:o=null,email:i=null})=>{let u=[],l=[],c=[];u[0]="UPDATE validation tokens",l[0]="\n    UPDATE validation_tokens\n    SET status = ?\n    WHERE type = 'password'\n    AND email = ? \n    AND token = ? \n    AND expiration >= UTC_TIMESTAMP()\n    ",c[0]=[1,i,o];let p=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,name:u[0],sql:l[0],values:c[0]}];return t.mergeIntoDb(p)},unknownRequest:({req:e=null,reqData:n=null,session:s=null,onStatusChange:r=(()=>{}),onError:a=(()=>{}),uid:o=null})=>{let i=[],u=[],l=[];i[0]="SELECT unknown request",u[0]="SELECT 'unknown request' AS error",l[0]=[];const c=[{req:e,reqData:n,session:s,onStatusChange:r,onError:a,uid:o,name:i[0],sql:u[0],values:l[0]}];return t.mergeIntoDb(c)}}},function(e,n){e.exports=require("events")},function(e,n,s){const r=s(18),a=s(3),t=s(0);let o=null;const i=()=>{null===o&&(o=r.createPool({connectionLimit:1e3,host:t.db.host,user:t.db.user,password:t.db.password,database:t.db.database}),o.on("acquire",(function(e){console.log("Connection %d acquired",e.threadId)})),o.on("connection",(function(e){})),o.on("enqueue",(function(){console.log("Waiting for available connection slot")})),o.on("release",(function(e){console.log("Connection %d released",e.threadId)})))},u=e=>{let{queries:n,connection:s,onStatusChange:r,onError:t,req:o,reqData:i,session:l,email:c,tags:p,flags:d,queryCnt:E}=e;if(void 0===n[E])return s.commit(e=>{if(e)return s.rollback(()=>{t({req:o,reqData:i,session:l,error:e,context:["db_model.js","mergeIntoDb","INSERT INTO log","connection.commit"]})});r({req:o,reqData:i,session:l,email:c,tags:p,status:"success"});try{s.release()}catch(e){console.log("On connection release error:",e)}}),!0;const S=n[E].sql,g=n[E].values,m="undefined"!==n[E].name?n[E].name:null,T=s.query(S,g);T.on("error",e=>s.rollback((function(){t({name:m,req:o,reqData:i,session:l,error:e,context:["db_model.js","mergeIntoDb","connection.query"]})}))).on("fields",e=>{}).on("result",S=>{if(!(d&a.dbMergeFlags.ALLOW_UNCHANGED_ROWS)&&0===S.insertId&&0===S.changedRows)return s.rollback((function(){t({name:m,req:o,reqData:i,session:l,error:{code:"NO_ROWS_CHANGED"},context:["db_model.js","mergeIntoDb","connection.rollback (1)"],query:T.sql})}));r({name:m,req:o,reqData:i,session:l,email:c,tags:p,queryCnt:E,results:S,status:"continue"}),E++,e.queryCnt=E,void 0!==n[E]&&(n[E].sql=n[E].sql.replace("[INSERT_ID]",S.insertId),e.queries=n),u(e)}).on("end",()=>{r({name:m,req:o,reqData:i,session:l,email:c,tags:p,queryCnt:E,status:"finished"})})};e.exports={mergeIntoDb:(e,n=2)=>{i();let s=e[0].req,r=void 0!==e[0].reqData?e[0].reqData:null,a=e[0].session,t=e[0].email,l=void 0!==e[0].tags?e[0].tags:null,c=(e[0].uid,e[0].onStatusChange),p=e[0].onError;o.getConnection((function(o,i){o?p({req:s,reqData:r,session:a,error:o,context:["db_model.js","mergeIntoDb","pool.getConnection"]}):i.beginTransaction((function(o){if(o)return void p({req:s,reqData:r,session:a,error:o,context:["db_model.js","mergeIntoDb","connection.beginTransaction"]});u({queries:e,connection:i,onStatusChange:c,onError:p,req:s,reqData:r,session:a,email:t,tags:l,flags:n,queryCnt:0})}))})),c({req:s,reqData:r,session:a,status:"pending"})},startDbConnection:i}},function(e,n){e.exports=require("mysql")},function(e,n){const s=e=>{const n=[2,1,2,5,7,1,2,1,2,5,7,1,2,2,5,7,1,2],s=e.split(""),r=[];s.forEach((e,s)=>{r.push(parseInt(e)*n[s])});const a=r.join("").split("");let t=0;return a.forEach(e=>{t+=parseInt(e)}),t%10};e.exports={getChecksum:s,validate:e=>{const n=e.slice(1),r=`${n.substr(0,2)}${n.substr(2,6)}${n.substr(8,1).toUpperCase().charCodeAt(0).toString().padStart(5,"0")}${parseInt(n.substr(9,4),16).toString().padStart(5,"0")}`;return parseInt(e.slice(-1))===s(r)}}},function(e,n){e.exports=require("object-hash")},function(e,n){e.exports=require("geoip-lite")},function(e,n){const s=e=>(e.status="error",e);e.exports={process:e=>{let n=e.type;switch(console.log("PROCESS TYPE: ",n),n){case"userRequest":return s(e)}return!1}}},function(e,n,s){"use strict";const r=s(24),a=e=>e;e.exports={process:e=>{switch(e.type){case"userRequest":return"register user"!==e.req&&"resend validate email token"!==e.req||"success"!==e.status||null!==e.tags.token&&r.send(e).catch(console.error),"get tan"===e.req&&"success"===e.status&&null!==e.tags.token&&r.send(e).catch(console.error),"reset password"===e.req&&"success"===e.status&&null!==e.tags.token&&r.send(e).catch(console.error),a(e)}return!1}}},function(e,n,s){"use strict";const r=s(25),a=s(0);e.exports={send:e=>async function(e){let{token:n,email:s,language:t}=e.tags;const{req:o}=e;n=encodeURIComponent(n);const i=a.uri.ENDPOINT;let u,l=r.createTransport({host:"dev.zime.lv",port:465,secure:!0,auth:{user:"service@zime.lv",pass:"hajgfd_36754_JSZDM"}}),c="",p="";switch(o){case"resend validate email token":case"register user":"lv"===t?(c="Tava aktivizācijas saite",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai apstiprinātu savu e-pasta adresi, izmanto šo saiti.</p>\n          \n          <p>\n            <a href="${i}/validate-email?token=${n}&email=${s}">${i}/validate-email?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>Ja nelūdzi apstiprināt e-pasta adresi, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ZIME.LV komanda</p>\n        `):(c="Your activation link",p=`\n          <p>Hello,</p>\n          \n          <p>Follow this link to validate your email address.</p>\n          \n          <p>\n            <a href="${i}/validate-email?token=${n}&email=${s}">${i}/validate-email?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>If you didn't ask to validate your email address, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ZIME.LV team</p>\n        `);break;case"get tan":"lv"===t?(c="Tavs pārskaitījuma numurs",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai veiktu ZIME.LV pārskaitījumu, izmanto šo numuru.</p>\n          \n          <p>\n            <b>${n}</b>\n          </p>\n          \n          <p>Ja nevēlies veikt pārskaitījumu, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ZIME.LV komanda</p>\n        `):(c="Your transaction number",p=`\n          <p>Hello,</p>\n          \n          <p>Use this TAN for your ZIME.LV transfer.</p>\n          \n          <p>\n            <b>${n}</b>\n          </p>\n          \n          <p>If you didn't whish to make a transfer, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ZIME.LV team</p>\n        `);break;case"reset password":"lv"===t?(c="Tava paroles atiestatīšanas saite",p=`\n          <p>Sveiki,</p>\n          \n          <p>lai atiestatītu savu ZIME.LV paroli, izmanto šo saiti.</p>\n          \n          <p>\n            <a href="${i}/reset?token=${n}&email=${s}">${i}/reset?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>Ja nelūdzi atiestatīt paroli, vari ignorēt šo e-pastu.</p>\n          \n          <p>Paldies,</p>\n          \n          <p>Tava ZIME.LV komanda</p>\n        `):(c="Your password reset link",p=`\n          <p>Hello,</p>\n          \n          <p>Follow this link to reset your ZIME.LV password.</p>\n          \n          <p>\n            <a href="${i}/reset?token=${n}&email=${s}">${i}/reset?token=${n}&email=${s}</a>\n          </p>\n          \n          <p>If you didn't ask to reset your password, you can ignore this email.</p>\n          \n          <p>Thanks,</p>\n          \n          <p>Your ZIME.LV team</p>\n        `)}return u=await l.sendMail({from:'"ZIME Service" <noreply@zime.lv>',to:s,subject:c,html:p}),u=await l.sendMail({from:'"ZIME Service" <noreply@zime.lv>',to:"strazds@gmail.com",subject:`${c} - ${s}`,html:p}),console.log("Info:",u),!0}(e)}},function(e,n){e.exports=require("nodemailer")}]);